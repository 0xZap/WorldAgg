// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AmountPerMintUpdated extends ethereum.Event {
  get params(): AmountPerMintUpdated__Params {
    return new AmountPerMintUpdated__Params(this);
  }
}

export class AmountPerMintUpdated__Params {
  _event: AmountPerMintUpdated;

  constructor(event: AmountPerMintUpdated) {
    this._event = event;
  }

  get oldAmount(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogMintAttempt extends ethereum.Event {
  get params(): LogMintAttempt__Params {
    return new LogMintAttempt__Params(this);
  }
}

export class LogMintAttempt__Params {
  _event: LogMintAttempt;

  constructor(event: LogMintAttempt) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get root(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get nullifierHash(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class LogMintError extends ethereum.Event {
  get params(): LogMintError__Params {
    return new LogMintError__Params(this);
  }
}

export class LogMintError__Params {
  _event: LogMintError;

  constructor(event: LogMintError) {
    this._event = event;
  }

  get sender(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get errorType(): string {
    return this._event.parameters[1].value.toString();
  }

  get reason(): string {
    return this._event.parameters[2].value.toString();
  }
}

export class Minted extends ethereum.Event {
  get params(): Minted__Params {
    return new Minted__Params(this);
  }
}

export class Minted__Params {
  _event: Minted;

  constructor(event: Minted) {
    this._event = event;
  }

  get to(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnerTokensClaimed extends ethereum.Event {
  get params(): OwnerTokensClaimed__Params {
    return new OwnerTokensClaimed__Params(this);
  }
}

export class OwnerTokensClaimed__Params {
  _event: OwnerTokensClaimed;

  constructor(event: OwnerTokensClaimed) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class WaitBetweenMintsUpdated extends ethereum.Event {
  get params(): WaitBetweenMintsUpdated__Params {
    return new WaitBetweenMintsUpdated__Params(this);
  }
}

export class WaitBetweenMintsUpdated__Params {
  _event: WaitBetweenMintsUpdated;

  constructor(event: WaitBetweenMintsUpdated) {
    this._event = event;
  }

  get oldWait(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newWait(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class OROToken__nullifierHashMintDataResult {
  value0: BigInt;
  value1: BigInt;

  constructor(value0: BigInt, value1: BigInt) {
    this.value0 = value0;
    this.value1 = value1;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromUnsignedBigInt(this.value1));
    return map;
  }

  getLastMintedAt(): BigInt {
    return this.value0;
  }

  getNumOfMints(): BigInt {
    return this.value1;
  }
}

export class OROToken extends ethereum.SmartContract {
  static bind(address: Address): OROToken {
    return new OROToken("OROToken", address);
  }

  MINT_AMOUNT(): BigInt {
    let result = super.call("MINT_AMOUNT", "MINT_AMOUNT():(uint256)", []);

    return result[0].toBigInt();
  }

  try_MINT_AMOUNT(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("MINT_AMOUNT", "MINT_AMOUNT():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowance(owner: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );

    return result[0].toBigInt();
  }

  try_allowance(owner: Address, spender: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [ethereum.Value.fromAddress(owner), ethereum.Value.fromAddress(spender)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  approve(spender: Address, value: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  hasMinted(param0: Address): boolean {
    let result = super.call("hasMinted", "hasMinted(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);

    return result[0].toBoolean();
  }

  try_hasMinted(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall("hasMinted", "hasMinted(address):(bool)", [
      ethereum.Value.fromAddress(param0)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  lastOwnerClaimSupply(): BigInt {
    let result = super.call(
      "lastOwnerClaimSupply",
      "lastOwnerClaimSupply():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_lastOwnerClaimSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "lastOwnerClaimSupply",
      "lastOwnerClaimSupply():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nullifierHashMintData(
    param0: Address
  ): OROToken__nullifierHashMintDataResult {
    let result = super.call(
      "nullifierHashMintData",
      "nullifierHashMintData(address):(uint40,uint32)",
      [ethereum.Value.fromAddress(param0)]
    );

    return new OROToken__nullifierHashMintDataResult(
      result[0].toBigInt(),
      result[1].toBigInt()
    );
  }

  try_nullifierHashMintData(
    param0: Address
  ): ethereum.CallResult<OROToken__nullifierHashMintDataResult> {
    let result = super.tryCall(
      "nullifierHashMintData",
      "nullifierHashMintData(address):(uint40,uint32)",
      [ethereum.Value.fromAddress(param0)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new OROToken__nullifierHashMintDataResult(
        value[0].toBigInt(),
        value[1].toBigInt()
      )
    );
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(to: Address, value: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);

    return result[0].toBoolean();
  }

  try_transfer(to: Address, value: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(to),
      ethereum.Value.fromUnsignedBigInt(value)
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(from: Address, to: Address, value: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    from: Address,
    to: Address,
    value: BigInt
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(from),
        ethereum.Value.fromAddress(to),
        ethereum.Value.fromUnsignedBigInt(value)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  waitBetweenMints(): BigInt {
    let result = super.call(
      "waitBetweenMints",
      "waitBetweenMints():(uint40)",
      []
    );

    return result[0].toBigInt();
  }

  try_waitBetweenMints(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "waitBetweenMints",
      "waitBetweenMints():(uint40)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get _worldId(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _appId(): string {
    return this._call.inputValues[2].value.toString();
  }

  get _actionId(): string {
    return this._call.inputValues[3].value.toString();
  }

  get _amountPerMint(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get _waitBetweenMints(): BigInt {
    return this._call.inputValues[5].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class ClaimOwnerTokensCall extends ethereum.Call {
  get inputs(): ClaimOwnerTokensCall__Inputs {
    return new ClaimOwnerTokensCall__Inputs(this);
  }

  get outputs(): ClaimOwnerTokensCall__Outputs {
    return new ClaimOwnerTokensCall__Outputs(this);
  }
}

export class ClaimOwnerTokensCall__Inputs {
  _call: ClaimOwnerTokensCall;

  constructor(call: ClaimOwnerTokensCall) {
    this._call = call;
  }
}

export class ClaimOwnerTokensCall__Outputs {
  _call: ClaimOwnerTokensCall;

  constructor(call: ClaimOwnerTokensCall) {
    this._call = call;
  }
}

export class MintCall extends ethereum.Call {
  get inputs(): MintCall__Inputs {
    return new MintCall__Inputs(this);
  }

  get outputs(): MintCall__Outputs {
    return new MintCall__Outputs(this);
  }
}

export class MintCall__Inputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }

  get signal(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get root(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get nullifierHash(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get proof(): Array<BigInt> {
    return this._call.inputValues[3].value.toBigIntArray();
  }
}

export class MintCall__Outputs {
  _call: MintCall;

  constructor(call: MintCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class SetAmountPerMintCall extends ethereum.Call {
  get inputs(): SetAmountPerMintCall__Inputs {
    return new SetAmountPerMintCall__Inputs(this);
  }

  get outputs(): SetAmountPerMintCall__Outputs {
    return new SetAmountPerMintCall__Outputs(this);
  }
}

export class SetAmountPerMintCall__Inputs {
  _call: SetAmountPerMintCall;

  constructor(call: SetAmountPerMintCall) {
    this._call = call;
  }

  get _amountPerMint(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetAmountPerMintCall__Outputs {
  _call: SetAmountPerMintCall;

  constructor(call: SetAmountPerMintCall) {
    this._call = call;
  }
}

export class SetWaitBetweenMintsCall extends ethereum.Call {
  get inputs(): SetWaitBetweenMintsCall__Inputs {
    return new SetWaitBetweenMintsCall__Inputs(this);
  }

  get outputs(): SetWaitBetweenMintsCall__Outputs {
    return new SetWaitBetweenMintsCall__Outputs(this);
  }
}

export class SetWaitBetweenMintsCall__Inputs {
  _call: SetWaitBetweenMintsCall;

  constructor(call: SetWaitBetweenMintsCall) {
    this._call = call;
  }

  get _waitBetweenMints(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetWaitBetweenMintsCall__Outputs {
  _call: SetWaitBetweenMintsCall;

  constructor(call: SetWaitBetweenMintsCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get to(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get from(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get to(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}
