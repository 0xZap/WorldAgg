// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class TokenClaim extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenClaim entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenClaim must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TokenClaim", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TokenClaim | null {
    return changetype<TokenClaim | null>(store.get_in_block("TokenClaim", id));
  }

  static load(id: string): TokenClaim | null {
    return changetype<TokenClaim | null>(store.get("TokenClaim", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get claimant(): string {
    let value = this.get("claimant");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set claimant(value: string) {
    this.set("claimant", Value.fromString(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get timestamp(): BigInt {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set timestamp(value: BigInt) {
    this.set("timestamp", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static loadInBlock(id: string): User | null {
    return changetype<User | null>(store.get_in_block("User", id));
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get address(): Bytes {
    let value = this.get("address");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set address(value: Bytes) {
    this.set("address", Value.fromBytes(value));
  }

  get totalClaims(): BigInt {
    let value = this.get("totalClaims");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalClaims(value: BigInt) {
    this.set("totalClaims", Value.fromBigInt(value));
  }

  get claims(): TokenClaimLoader {
    return new TokenClaimLoader("User", this.get("id")!.toString(), "claims");
  }

  get firstClaimTimestamp(): BigInt | null {
    let value = this.get("firstClaimTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set firstClaimTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("firstClaimTimestamp");
    } else {
      this.set("firstClaimTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get lastClaimTimestamp(): BigInt | null {
    let value = this.get("lastClaimTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set lastClaimTimestamp(value: BigInt | null) {
    if (!value) {
      this.unset("lastClaimTimestamp");
    } else {
      this.set("lastClaimTimestamp", Value.fromBigInt(<BigInt>value));
    }
  }

  get uniqueDays(): BigInt {
    let value = this.get("uniqueDays");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set uniqueDays(value: BigInt) {
    this.set("uniqueDays", Value.fromBigInt(value));
  }
}

export class DailyClaimStat extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save DailyClaimStat entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type DailyClaimStat must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("DailyClaimStat", id.toString(), this);
    }
  }

  static loadInBlock(id: string): DailyClaimStat | null {
    return changetype<DailyClaimStat | null>(
      store.get_in_block("DailyClaimStat", id)
    );
  }

  static load(id: string): DailyClaimStat | null {
    return changetype<DailyClaimStat | null>(store.get("DailyClaimStat", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get date(): string {
    let value = this.get("date");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set date(value: string) {
    this.set("date", Value.fromString(value));
  }

  get totalClaims(): BigInt {
    let value = this.get("totalClaims");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalClaims(value: BigInt) {
    this.set("totalClaims", Value.fromBigInt(value));
  }

  get uniqueUsers(): BigInt {
    let value = this.get("uniqueUsers");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set uniqueUsers(value: BigInt) {
    this.set("uniqueUsers", Value.fromBigInt(value));
  }
}

export class TokenStats extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TokenStats entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TokenStats must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TokenStats", id.toString(), this);
    }
  }

  static loadInBlock(id: string): TokenStats | null {
    return changetype<TokenStats | null>(store.get_in_block("TokenStats", id));
  }

  static load(id: string): TokenStats | null {
    return changetype<TokenStats | null>(store.get("TokenStats", id));
  }

  get id(): string {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get totalClaims(): BigInt {
    let value = this.get("totalClaims");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalClaims(value: BigInt) {
    this.set("totalClaims", Value.fromBigInt(value));
  }

  get uniqueClaimants(): BigInt {
    let value = this.get("uniqueClaimants");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set uniqueClaimants(value: BigInt) {
    this.set("uniqueClaimants", Value.fromBigInt(value));
  }

  get totalAmountClaimed(): BigInt {
    let value = this.get("totalAmountClaimed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalAmountClaimed(value: BigInt) {
    this.set("totalAmountClaimed", Value.fromBigInt(value));
  }
}

export class TokenClaimLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): TokenClaim[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<TokenClaim[]>(value);
  }
}
